<?php

/*class simpleclass{
	public $var = "a default vaule";

	public function displayVar(){
		echo $this->var;
	}
}

$a = new simpleclass();
$a->displayVar();
echo "\n";
#$this伪变量示例
class A{
	function foo(){
		if(isset($this)){
			echo '$this is defined(';
			echo get_class($this);
			echo ")\n";
		}else{
			echo "\$this is not defined.\n";
		}
	}
}

class B{
	function bar(){
		A::foo();
	}
}

$a = new A();
$a->foo();

A::foo();

$b = new B();
$b->bar();

B::bar();*/

//2018-8-13 23:47:08
/*$instance = new SimpleClass();

$assigned = $instance;
$reference =& $instance;

$instance -> var = "$assigned will have this value";

$instance = null;

var_dump($instance);
var_dump($reference);
var_dump($assigned);*/
/*$instance  = new  SimpleClass ();

$assigned    =   $instance ;
$reference   =&  $instance ;

$instance -> var  =  '$assigned will have this value' ;

 $instance  =  null ;  // $instance and $reference become null

 var_dump ( $instance );
 var_dump ( $reference );
 var_dump ( $assigned );*/

/*#创建新对象
class Test{
    static public function getNew(){
        return new static;
    }
}

class Child extends Test{

}

$obj1 = new Test();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew();
var_dump($obj3 instanceof Test);

$obj4 = Child::getNew();
var_dump($obj4 instanceof Child);*/

//2018-8-14 16:34:28
/*#4 对象赋值
class SimpleClass{

}

$instance = new SimpleClass();

$assigned = $instance;
$reference =& $instance;

$instance -> var = '$assigned will have this value';

$instance = null;

var_dump($instance);
var_dump($reference);
var_dump($assigned);*/


/*class People{
    private $name;
    public function __construct($name = ""){
        $this->name = $name;
    }
    //此方法就不适合用static方法，因为他要使用实例的成员变量name
    public function sayMyName(){
        echo "My name is ".$this->name;
    }
    //类似这种方法的就最好写成static方法
    public static function isMe($obj){
        var_dump(get_class($obj));//输出bool true
        return get_class($obj) == "People" ? true : false;
    }
}


$me = new People("s524797336");
$me->sayMyName();//输出s524797336
var_dump(People::isMe($me));//输出bool true*/

/*class simpleClass{
    function displayVar(){
        echo "a default value\n";
    }
}

class extendClass extends simpleClass{
    function displayVar(){
        echo __CLASS__."Extending class\n";
        parent::displayVar();
    }
}

$extended = new extendClass();
$extended -> displayVar();*/

/*namespace NS{
    class className{
        function __construct()
        {
            echo 11111;
            echo __CLASS__;
        }
    }
    echo className::class;
    new className();
}*/

/*class SimpleClass{
    public $var6 = myConstant;
    public $var7 = array(true,false);
    public $var8 = <<<'EOD1'
    
$hello world
EOD1;

}

$a = new SimpleClass();

echo $a->var8;*/


/*#定义和使用一个常量类
class myclass{
    const constant = 'constant value';

    function showConstant(){
        echo self::constant."\n";
    }
}

echo myclass::constant."\n";

$classname = "myclass";
echo $classname::constant."\n";

$class = new myclass();
$class -> showConstant();

echo $class::constant."\n";*/

/*function __autoload($class_name){
    require_once $class_name.'.php';
}
$obj = new class1();
$obj2 = new class2();*/

/*#接口 关键字inferface,实现接口implements
function __autoload($a){
    var_dump($a);
}

interface itest{
    const Name = 'hehe';
    public function s($a,$bbc);
}

class foo implements itest{
    public function s($aaaaaaaaaaaaa,$b='1'){

    }
}*/

/*#抽象类 abstrace
abstract class shape{
    abstract protected function get_area();
    private function otherfunction(){$a=1;}
}

class tectangle extends shape{
    private $width;
    private $height;
    function __construct($width = 0,$height = 0)
    {
        $this->width = $width;
        $this->height = $height;
    }

    function get_area(){
        echo ($this->width+$this->height)*2;
    }

    function otherfunction()
    {
        parent::otherfunction(); // TODO: Change the autogenerated stub
    }
}

$shape_rect = new tectangle(20,40);
$shape_rect->get_area();*/

/*#自动加载在PHP 5.3.0+中的异常处理
function __autoload($name){
    echo "want to load $name .\n";
    throw new Exception(
        "unable to load $name ."
    );
}

try{
    $obj = new NonLoadableClass();
}catch(Exception $e){
    echo $e -> getMessage(),"\n";
}*/

//var_dump(get_class_methods(Exception));
//var_dump(get_class_vars(Exception));

/*#自动加载在PHP 5.3.0+中的异常处理-没有自定义异常机制
function __autoload($name){
    echo "want to load $name";
    throw new missingException("unable to load $name");
}
class missingException extends Exception{
    function __toString(){
        return
            'codes:'.$this->getCode().
            '<br>message:'.$this->getMessage().
            '<br>file:'.$this->getFile().
            '<br>track:'.var_dump($this->getTrace()).
            '<br>line:'.$this->getLine();
    }
}
try{
    $obj = new lakdjfladsk();
}catch(Exception $ee){
    echo $ee->__toString();
}*/

/*#__construct构造相关
class BaseClass{
    function __construct(){
        print "in baseclass constructor"."<hr>";
    }
}

class SubClass extends BaseClass {
    function __construct(){
        parent::__construct();
        print "in subclass constructor"."<hr>";
    }
}

class OtherSubClass extends SubClass {

}

$obj = new BaseClass();

$obj = new SubClass();

$obj = new OtherSubClass();*/

/*#__destruct()析构相关
class myDestructableClass{
    function __construct()
    {
        ini_set('date.timezone','Asia/Shanghai');
        print "<hr>in constructor";
        $this -> name = "hah";
    }
    public function a(){
        echo 1111111111111;
    }
    function __destruct()
    {
        print "<hr>"."destroying ".$this->name;
    }
    public function b(){
        return "现在时间是".date("Y-m-d H:i:sa");
    }
}

class mydestructablechild extends myDestructableClass {
    public function c(){
        echo "<hr>".__CLASS__;
    }
    public function __destruct(){
        parent::__destruct();
        parent::__construct();
        echo "<hr>zileidexigou";
    }
}

//$obj = new myDestructableClass();
//echo $obj->a();
//echo $obj->b();

$obj1 = new mydestructablechild();
$obj1->c();*/

/*页面每秒自动刷新
 * echo ("<script type=\"text/javascript\">");
echo ("function fresh_page()");
echo ("{");
echo ("window.location.reload();");
echo ("}");
echo ("setTimeout('fresh_page()',1000);");
echo ("</script>");*/

/*#连续继承的构造关系

class a{
    function __construct()
    {
        echo "aaaaaaa";
    }
}

class b extends a{
    function __construct()
    {
        echo "bbbbbb";
        //parent::__construct();
    }
}

class c extends b{
    function __construct()
    {
        parent::__construct();
        echo "cccc";
    }
}

new a;
echo "<hr>";
new b;
echo "<hr>";
new c;*/


/*class Myclass{
    const CONST_VALUE = 'A constant value';
    public $a = 'a';
}

#$classname = 'MyClass';
#echo $classname :: CONST_VALUE;
#echo MyClass::CONST_VALUE;

class OtherClass extends Myclass{
    public static $my_static = 'static var';

    public static function doubleColon(){
        echo parent :: CONST_VALUE;
        echo self :: $my_static;
    }
}

$classname = 'OtherClass';
echo $classname :: doubleColon();

OtherClass :: doubleColon();    */

/*#对象复制
class SubObject{
    static $instances = 0;
    public $instance;

    public function __construct(){
        $this -> instance = ++ self :: $instances;
    }

    public function __clone(){
        $this -> instance = ++ self :: $instances;
    }
}

class MyCloneable{
    public $object1;
    public $object2;

    function __clone(){
        //强制复制一份this->object,否则仍然只想同一个对象
        $this -> object1 = clone $this -> object1;
    }
}

$obj = new MyCloneable();

$obj -> object1 = new SubObject();
$obj -> object2 = new SubObject();

$obj2 = clone $obj;
echo "<pre>";
print("Original Object:\n");
print_r($obj);

print("Cloned Object:\n");
print_r($obj2);*/

/*//类型约束
class Myclass{
    //测试函数,第一个参数必须为OtherClass类的一个对象
    public function test( OtherClass $otherClass){
        echo $otherClass -> var;
    }

    //另一个测试函数,第一个参数必须为数组
    public function test_array( array $input_array){
        print_r( $input_array);
    }

    //第一个参数必须为递归类型
    public function test_interface(Traversable $iterator){
        echo get_class($iterator);
    }

    //第一个参数必须为回调类型
    public function test_callable(callable $callable , $data){
        call_user_func($callback ,$user);
    }
}

//otherclass类定义
class OtherClass{
    public $var = 'Hello World';
}

$myclass = new MyClass;
$otherClass = new OtherClass;

//$myclass -> test('hello');*/

/*class exercise{
    public $string = "this is a string";
    static public $rua1 = "this is a stri1ng";


    public function __construct($width,$height){
        if($width<10){
            echo $this->string;
            echo "面积是".$this->mianji($width,$height);
            echo $this->string;
        }

    }

    private function mianji($a,$b){
        $this->string='hehe';
        #echo $this->string;
        return $a*$b;
    }

    static function rua(){
        echo self::$rua1;
        echo 'aaa';
    }
}

//$mianji = new exercise(30,40);

exercise::$rua1 = 11111;
echo exercise::rua();
echo exercise::$rua1;
//exercise::rua1;*/


/*#3 非静态环境下使用 static::
class a{
    public static function who(){
        echo __CLASS__;
    }
    public static function test(){
        self::who();
        static::who();
    }
}

class b extends a{
    public static function who(){
        echo __CLASS__;
    }
}

b::test();*/


/*#4.转发和非转发调用
class a{
    public static function foo(){
        static::who();
    }

    public static function who(){
        echo __CLASS__."\n";
    }
}

class b extends a{
    public static function test(){
        a::foo();
        parent::foo();
        self::foo();
    }

    public static function who(){
        echo __CLASS__."\n";
    }
}

class c extends b{
    public static function who(){
        echo __CLASS__."\n";
    }
}

c::test();*/


/*#引用和对象
class a{
    public $foo = 1;
}

$a = new a;
$b = $a;

$b -> foo  = 2;
echo $a -> foo;

$c = new a;
$d = & $c;

$d -> foo =2;
echo $c -> foo;

$e = new a;
function foo ($obj) {
    $obj -> foo =2;
}

foo($e);
echo $e->foo;*/



#对象序列化
class ACVVVVV{
    public $one = 1232323.22;
    public $one113111 = 23232;
    public $one111141 = 'heheh';
    public function show_one(){
        echo $this->one;
        echo "在这里输出";
    }
}
//O:7:"ACVVVVV":3:{s:8:"one11111";d:1232323.22;s:9:"one113111";i:23232;s:9:"one111141";s:5:"heheh";}